@public
collection Verse {

    // Will be autogenerated from the front-end using some sort of function.
    id : string; 

    // The title of the verse, max 50 characters.
    title : string;

    // The collection to which this verse belongs to.
    collectiion? : Collection;

    // The creator of the verse.
    creator : User;

    // The main content of the verse.
    content : string;

    // The list of unique users who have favorited the verse.
    favorites : User[];

    // The unix timestamp at which the verse was created.
    timestamp : number;

    constructor (id : string, title : string, collectiion? : Collection, creator : User, content : string, timestamp : number) {

        if(creator.id != ctx.publicKey.toHex()) {
            throw error('Authorization Error!');
        }     
      
        this.id = id;
        this.title = title;
        this.collectiion = collectiion;
        this.creator = creator;
        this.content = content;
        this.timestamp = timestamp;
        this.favorites = [];
    }

    addFavorite (new_user : User) {
        
        if(new_user.id != ctx.publicKey.toHex()) {
            throw error('Authorization Error!');
        }

        if(new_user.id == this.creator.id ) {
            throw error('Cannot favorite your own verse!');
        }
        this.creator.balance += 1;
        new_user.balance -= 1;
        this.favorites.push(new_user);

    }

}

@public
collection Collection {

    id : string;

    // The name of the collection, max 50 characters.
    name : string;

    // A small description of the collection.
    description : string;

    // The user who has created the user.
    creator : User;

    // To indicate whether the collection is public or private.
    private : boolean;

    // The price of the collection to be paid by the user.
    price : number;

    // The number of people who have subscribed to the collection.
    subscribers : User[];

    // The verses that are inside the collection.
    verses : Verse[];

    // The unix timestamp at which the comment was made.
    timestamp : number;

    constructor (id : string, name : string, description : string, creator : User, private : boolean, price : number, timestamp : number) {

        if(creator.id != ctx.publicKey.toHex()) {
            throw error('Authorization Error!');
        }
      
        this.id = id;
        this.name = name;
        this.description = description;
        this.creator = creator;
        this.private = private;
        this.price = price;
        this.timestamp = timestamp;
        this.subscribers = [];
        this.verses = [];
    }

    addVerse (new_verse : Verse) {

        if(ctx.publicKey.toHex() != this.creator.id) {
            throw error('Only the creator can add verse to the collection');
        }

        if(new_verse.creator.id != ctx.publicKey.toHex()) {
            throw error('You can only add verses that are created by you!');
        }

        this.verses.push(new_verse);
    }

    addSubscriber (new_sub : User) {

        if(new_sub.id != ctx.publicKey.toHex()) {
            throw error('Authorization Error!');
        }

        if(new_sub.id == this.creator.id ) {
            throw error('Cannot subscribe your own Collection!');
        }

        if(this.private == true) {
            this.creator.balance += this.price;
            new_sub.balance -= this.price;
        }

        this.subscribers.push(new_sub);
    }

}

@public 
collection User {

    // The PublicKey of the connected wallet. 
    id : string;

    pen_name : string;

    // The topics that this creator/user generally likes/follows.
    topics : Topic[];

    // The token balance of the user.
    balance : number;

    constructor (pen_name : string) {
        this.pen_name = pen_name;
        this.id = ctx.publicKey.toHex();
        this.topics = [];
        this.balance = 10000;
    }

    updateName (new_pen : string) {
        if(this.id != ctx.publicKey.toHex()) {
          throw error('Authorization Error!');
        }    
        this.pen_name = new_pen;
    }

}

@public
collection Comment {

    id : string;

    // The main content of the comment.
    comment : string;

    // The User who created the comment.
    user : User;

    // The verse on which this comment has been posted.
    verse : Verse;

    // The unix timestamp at which the comment was made.
    timestamp : number;

    constructor (id : string, comment : string, verse : Verse, timestamp : number, user : User) {

        if(user.id != ctx.publicKey.toHex()) {
            throw error('Authorization Error!');
        }

        this.user = user;
        this.id = id;
        this.comment = comment;
        this.verse = verse;
        this.timestamp = timestamp;
    }

}

@public 
collection Topic {

    id : string;

    constructor (id : string) {
        this.id = id;
    }

}